Long-term "TODO"
================
- add generic debugging code in plugin/playback handling to see what
  plugin gets to handle the given file.


- improve error handling:
  * plugin init() should be able to return error codes.
  * InputPlugin play_file also should return error codes (not only through
  InputPlayback->error) .. or maybe just change pb->error to more versatile
  enum instead of just signifying audio output problems.
  * OutputPlugin ?

  * Transport plugins?

- output plugins should have some kind of (optional) "query available formats"
  function, so that the core could determine what should be used. perhaps
  offer users this info?

- remove the idiotic XMMS compatibility output plugin hack.

- maybe all audio plugins (input, output, effect) could be made completely
  re-entrant. this probably means severely breaking the API. not very
  trivial either .. some plugins are probably impossible.
  * basically plugin init() should allocate / init a state struct to
    be used in all operations, etc.


- URIs with "?" are stripped (the subtune support uses that), which is bad,
  because some (a lot) of real-world URLs use 'GET' arguments. this breaks
  probing, but current input probing is confusing (and possibly broken anyway)
  and should be refactored.


- mime-types support:
  * there is already code for mime support, but I think it may not be
    sufficient as it is designed for input plugins only -- 
    also playlist containers etc. need this (IMHO)

  * might be nicer to have the type registrations in plugin struct
    instead of a separate function, a'la vfs_extensions.


- document the different APIs via Doxygen


- audacious VFS is not 64-bit offset safe, breakage will most likely occur,
  if files larger than 2^31 are used (rather unlikely, tho, but still...)

  * nenolod says: current vfs sucks, it needs a "rewrite":
    - buffering support
    - non-blocking I/O support
    - better error handling (e.g. unified error codes, etc.)


- {core,plugins}/configure.ac need some cleanup loving.
  * make session management (SM) optional. (done)
  * build system cleanups .. extra.mk.in? wtf? (done in core, progressing
  for plugins)
  --- this is in progress, worked on by ccr


- plugin rewrites:
  * madplug
  * modplug (in progress by ccr)
  * scrobbler (in progress by ccr)


Playlist code issues
====================

ccr rants:
----------
I suggest that the whole playlist manipulation should be moved into separate
thread. What I mean, is that the playlist scanning (e.g. probing for
metadata) AND adding files into playlist should be in a separate thread.
Operations on playlist would be somewhat asynchronic.

Adding files would work like this:
  1) feed URIs to playlist handler thread
  2) playlist handler notices new URIs and starts checking if they are valid
     aka probing or other checks.
  3) valid files/URIs get added to the playlist. unsupported files get discarded.

Possible benefits of this approach:
  - checking for "can we play this?", which currently happens in main
     thread and blocks the GUI etc, would now happen asynchronously.
  - improved user experience: less blocking generally, and it would be even
     possible to _parallelize_ probing, if we wanted to, getting metadata
     for multiple files at the same time. (this could be a user-settable
     option.)

Bad sides:
  - requires careful design and thread locking .. but that we need anyway.
  - possibly might make playlist GUI representation harder. I am not sure
    what effects this might have, feel free to pitch in thoughts...
